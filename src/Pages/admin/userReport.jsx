import React, { useEffect, useState } from "react";
import { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, BarChart, Bar } from "recharts";
import { FiDownload } from "react-icons/fi";
import axios from "axios";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";

const UserReportsPage = () => {
    const [userStats, setUserStats] = useState([]);
    const [topCustomers, setTopCustomers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [view, setView] = useState("day"); // day, week, month for dynamic selection

    // Fetch User Stats based on the view (day/week/month)
    const fetchUserStats = async (view) => {
        try {
            const { data } = await axios.get(`${import.meta.env.VITE_BACKEND_URL}/api/dashboard/user-enrollment?view=${view}`);
            setUserStats(data);
        } catch (error) {
            console.error("Error fetching user stats:", error);
        }
    };

    // Fetch Top Customers Data
    const fetchTopCustomers = async () => {
        try {
            const { data } = await axios.get(import.meta.env.VITE_BACKEND_URL+"/api/dashboard/top-customers");
            setTopCustomers(data);
        } catch (error) {
            console.error("Error fetching top customers:", error);
        }
    };

    // Fetch data when page loads or view changes
    useEffect(() => {
        fetchUserStats(view);
        fetchTopCustomers();
        setLoading(false);
    }, [view]);

    // Function to export the report to PDF
    const downloadPDF = async () => {
        const doc = new jsPDF("p", "mm", "a4");
        const pageWidth = doc.internal.pageSize.getWidth();
        const pageHeight = doc.internal.pageSize.getHeight();


        try {
            const logo = new Image();
            logo.src = "/logo1.png"; //  public path (no /public prefix)
            await new Promise((resolve, reject) => {
                logo.onload = resolve;
                logo.onerror = reject;
            });
            doc.addImage(logo, "PNG", 15, 10, 40, 20);
        } catch (err) {
            console.warn("âš  Logo failed to load, skipping image:", err);
        }


        // Add Report Title
        doc.setFontSize(16);
        doc.text("BuyNest Inventory & Supply Cost Analysis", pageWidth / 2, 40, { align: "center" });

        // Add the report period
        doc.setFontSize(12);
        doc.text(`Report Period: ${view.charAt(0).toUpperCase() + view.slice(1)}`, pageWidth / 2, 50, { align: "center" });

        // Add the User Registration Chart
        const chartNode = document.getElementById("user-registrations-chart");
        if (chartNode) {
            const canvas = await html2canvas(chartNode, {
                useCORS: true,
                backgroundColor: "#ffffff",
                scale: 2, // Increase scale for better resolution
            });
            const imgData = canvas.toDataURL("image/png");
            doc.addImage(imgData, "PNG", 15, 60, pageWidth - 30, (canvas.height * (pageWidth - 30)) / canvas.width);
        }

        // Add the Top Customers Chart
        const customersNode = document.getElementById("top-customers-chart");
        if (customersNode) {
            const canvas = await html2canvas(customersNode, {
                useCORS: true,
                backgroundColor: "#ffffff",
                scale: 2, // Increase scale for better resolution
            });
            const imgData = canvas.toDataURL("image/png");
            doc.addImage(imgData, "PNG", 15, 150, pageWidth - 30, (canvas.height * (pageWidth - 30)) / canvas.width);
        }

        // Add Footer
        const footerText = "Report generated by: System Administrator\nBuyNest Supplier Analysis System";
        doc.setFontSize(8);
        doc.text(footerText, 15, pageHeight - 15);

        // Save the PDF
        doc.save("user_report.pdf");
    };



    return (
        <div className="p-6">
            <h1 className="text-3xl font-bold mb-6">User Reports</h1>

            {/* Export PDF Button */}
            <button
                onClick={downloadPDF}
                className="inline-flex items-center gap-2 bg-emerald-600 text-white px-4 py-2 rounded-lg hover:bg-emerald-700 mb-6"
            >
                <FiDownload /> Export to PDF
            </button>

            {/* Time frame dropdown for User Registration Chart */}
            <div className="mb-6">
                <select
                    value={view}
                    onChange={(e) => setView(e.target.value)}
                    className="p-2 border border-gray-900 rounded-lg"
                >
                    <option value="day">Day</option>
                    <option value="week">Week</option>
                    <option value="month">Month</option>
                </select>
            </div>

            {/* User Registration Graph */}
            <div id="user-registrations-chart" className="mb-6">
                <h2 className="text-xl font-semibold mb-3">User Registrations ({view.charAt(0).toUpperCase() + view.slice(1)})</h2>
                {loading ? (
                    <div>Loading...</div>
                ) : (
                    <ResponsiveContainer width="100%" height={300}>
                        <LineChart data={userStats}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis dataKey="label" />
                            <YAxis />
                            <Tooltip />
                            <Legend />
                            <Line type="monotone" dataKey="count" stroke="#10b981" strokeWidth={3} />
                        </LineChart>
                    </ResponsiveContainer>
                )}
            </div>

            {/* Top Customers Graph (Bar Chart) */}
            <div id="top-customers-chart" className="mb-6">
                <h2 className="text-xl font-semibold mb-3">Top Customers</h2>
                {loading ? (
                    <div>Loading...</div>
                ) : (
                    <ResponsiveContainer width="100%" height={300}>
                        <BarChart data={topCustomers}>
                            <CartesianGrid strokeDasharray="3 3" />
                            <XAxis dataKey="customer" />
                            <YAxis />
                            <Tooltip />
                            <Legend />
                            <Bar dataKey="orders" fill="#10b981" />
                        </BarChart>
                    </ResponsiveContainer>
                )}
            </div>
        </div>
    );
};

export default UserReportsPage;
