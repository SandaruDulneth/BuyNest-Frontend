import { useEffect, useMemo, useState } from "react";
import {
    BarChart,
    Bar,
    XAxis,
    YAxis,
    CartesianGrid,
    Tooltip,
    ResponsiveContainer,
    Legend,
    LineChart,
    Line, PieChart, Pie, Cell,
} from "recharts";
import { FiDownload } from "react-icons/fi";
import jsPDF from "jspdf";
import html2canvas from "html2canvas";

const OrderReport = () => {
    const [data, setData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [err, setErr] = useState(null);

    useEffect(() => {
        let alive = true;
        (async () => {
            try {
                const r = await fetch(import.meta.env.VITE_BACKEND_URL+"/api/dashboard/overview", {
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: `Bearer ${localStorage.getItem("token") || ""}`,
                    },
                    credentials: "include",
                });
                if (!r.ok) throw new Error(await r.text());
                const j = await r.json();
                if (alive) {
                    setData(j);
                    setLoading(false);
                }
            } catch (e) {
                setErr(e.message || "Failed to load dashboard");
                setLoading(false);
            }
        })();
        return () => {
            alive = false;
        };
    }, []);

    const COLORS = useMemo(
        () => [
            "#6366F1",
            "#F59E0B",
            "#10B981",
            "#EF4444",
            "#3B82F6",
            "#A855F7",
            "#14B8A6",
            "#84CC16",
            "#F97316",
            "#64748B",
        ],
        []
    );

    const downloadPDF = async () => {
        const doc = new jsPDF("p", "mm", "a4");
        const pageWidth = doc.internal.pageSize.getWidth();
        const pageHeight = doc.internal.pageSize.getHeight();

        // Logo
        const logo = new Image();
        logo.src = "/logo1.png";
        await new Promise((resolve) => (logo.onload = resolve));
        doc.addImage(logo, "PNG", 15, 10, 25, 15);

        // Header
        doc.setFontSize(16);
        doc.setTextColor(33, 33, 33);
        doc.text("BuyNest Order Report", pageWidth / 2, 30, {
            align: "center",
        });

        // Generation date
        doc.setFontSize(10);
        doc.setTextColor(100, 100, 100);
        doc.text(`Generated on: ${new Date().toLocaleString()}`, pageWidth - 15, 20, {
            align: "right",
        });

        let currentY = 45;

        // Product Sales Chart
        const salesNode = document.getElementById("product-sales-chart");
        if (salesNode) {
            doc.setFontSize(12);
            doc.setTextColor(33, 33, 33);
            doc.text("Product Sales Revenue", 15, currentY);

            const canvas = await html2canvas(salesNode, {
                useCORS: true,
                backgroundColor: "#ffffff",
                scale: 1.5,
            });
            const imgData = canvas.toDataURL("image/png");
            const chartHeight = 60;
            doc.addImage(imgData, "PNG", 15, currentY + 5, pageWidth - 30, chartHeight);
            currentY += chartHeight + 15;
        }

        // Sales by Category Chart
        const categoryNode = document.getElementById("sales-by-category-chart");
        if (categoryNode) {
            doc.setFontSize(12);
            doc.setTextColor(33, 33, 33);
            doc.text("Sales by Product Category", 15, currentY);

            const canvas = await html2canvas(categoryNode, {
                useCORS: true,
                backgroundColor: "#ffffff",
                scale: 1.5,
            });
            const imgData = canvas.toDataURL("image/png");
            const chartHeight = 60;
            doc.addImage(imgData, "PNG", 15, currentY + 5, pageWidth - 30, chartHeight);
            currentY += chartHeight + 15;
        }

        // Daily Orders Chart
        const ordersNode = document.getElementById("daily-orders-chart");
        if (ordersNode && currentY < pageHeight - 50) {
            doc.setFontSize(12);
            doc.setTextColor(33, 33, 33);
            doc.text("Daily Order Count", 15, currentY);

            const canvas = await html2canvas(ordersNode, {
                useCORS: true,
                backgroundColor: "#ffffff",
                scale: 1.5,
            });
            const imgData = canvas.toDataURL("image/png");
            const chartHeight = 60;
            doc.addImage(imgData, "PNG", 15, currentY + 5, pageWidth - 30, chartHeight);
            currentY += chartHeight + 15;
        }

        // Footer
        doc.setFontSize(9);
        doc.setTextColor(100, 100, 100);
        doc.text("Report generated by: System Administrator", 15, pageHeight - 15);
        doc.text("BuyNest Order Report System", 15, pageHeight - 10);
        doc.text("Page 1 / 1", pageWidth - 20, pageHeight - 10);

        doc.save("BuyNest_Order_Report.pdf");
    };

    // ðŸŒŸ Beautiful full-screen loading state
    if (loading) {
        return (
            <div className="flex flex-col items-center justify-center min-h-screen bg-neutral-50 ">
                <div className="relative">
                    <div className="w-16 h-16 border-4 border-emerald-500 border-t-transparent rounded-full animate-spin"></div>
                    <div className="absolute top-1/2 left-1/2 w-6 h-6 bg-emerald-500 rounded-full animate-ping -translate-x-1/2 -translate-y-1/2"></div>
                </div>

            </div>
        );
    }

    if (err) return <div className="p-6 text-rose-600">Error: {err}</div>;

    const { series, category } = data;

    return (
        <main className="p-6 space-y-6 bg-neutral-50 min-h-screen font-poppins">
            <h1 className="text-3xl font-extrabold tracking-tight">Order Report</h1>

            {/* Export PDF Button */}
            <button
                onClick={downloadPDF}
                className="inline-flex items-center gap-2 bg-emerald-600 text-white px-4 py-2 rounded-lg hover:bg-emerald-700 transition-colors"
            >
                <FiDownload /> Export to PDF
            </button>

            {/* Daily Orders Line Chart */}
            <section className="rounded-2xl border border-neutral-200 bg-white p-5 shadow-sm hover:shadow-md transition-shadow">
                <h2 className="text-2xl font-bold text-neutral-900">Daily Order Count</h2>
                <div className="h-72 mt-4 pdf-chart-container" id="daily-orders-chart">
                    <ResponsiveContainer width="100%" height="100%">
                        <LineChart data={series} margin={{ top: 20, right: 20, left: 0, bottom: 0 }}>
                            <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
                            <XAxis dataKey="day" tick={{ fill: "#6b7280" }} />
                            <YAxis tick={{ fill: "#6b7280" }} />
                            <Tooltip formatter={(val) => [`${val} orders`, "Orders"]} />
                            <Legend />
                            <Line
                                type="monotone"
                                dataKey="orders"
                                stroke="#3B82F6"
                                strokeWidth={3}
                                dot={{ r: 4 }}
                                activeDot={{ r: 6 }}
                            />
                        </LineChart>
                    </ResponsiveContainer>
                </div>
            </section>


            {/* Sales by product category */}
            <section className="rounded-2xl border border-neutral-200 bg-white p-5 shadow-sm hover:shadow-md transition-shadow">
                <h2 className="text-2xl font-bold text-neutral-900">Sales by product category</h2>
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 mt-4">
                    <div className="lg:col-span-2 h-72 pdf-chart-container" id="sales-by-category-chart">
                        <ResponsiveContainer width="100%" height="100%">
                            <PieChart>
                                <Pie
                                    data={category}
                                    dataKey="amount"
                                    nameKey="category"
                                    outerRadius={110}
                                    label={(e) => `${e.category} ${e.percent}%`}
                                >
                                    {category.map((_, i) => (
                                        <Cell key={i} fill={COLORS[i % COLORS.length]} />
                                    ))}
                                </Pie>
                                <Tooltip />
                            </PieChart>
                        </ResponsiveContainer>
                    </div>
                </div>
            </section>



            {/* Add CSS for PDF export */}
            <style jsx>{`
                @media print {
                    .pdf-chart-container {
                        background: white !important;
                        border: 1px solid #e5e7eb !important;
                        border-radius: 8px !important;
                    }
                    
                    .pdf-chart-container * {
                        background: white !important;
                    }
                }
            `}</style>
        </main>
    );
};

export default OrderReport;
